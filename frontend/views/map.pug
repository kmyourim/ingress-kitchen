#menu_wrap(style="display: flex; justify-content: center; align-items: flex-start; margin: 0 auto; width: 95%;")
  #placesList
    p(style="text-align: center; color: gray; height: 350px; width: 250px; white-space: pre;")   검색 결과가 이곳에 표시됩니다.    
  #map(style=" height: 400px; width: 100%; border: 1px solid #ccc;")
#pagination(style="font-size: 25px; letter-spacing: 5px;")



script.
    var markers = [];

    var mapContainer = document.getElementById('map'),
        mapOption = {
            center: new kakao.maps.LatLng(37.4814917, 126.8804951),
            level: 3
        };

    var map = new kakao.maps.Map(mapContainer, mapOption);
    var ps = new kakao.maps.services.Places();
    var infowindow = new kakao.maps.InfoWindow({zIndex: 1});
    
    searchPlaces();

    function searchPlaces() {
        var keyword = document.getElementById('keyword').value;
        ps.keywordSearch(keyword, placesSearchCB);
    }

    function placesSearchCB(data, status, pagination) {
        if (status === kakao.maps.services.Status.OK) {
            displayPlaces(data);
            displayPagination(pagination);
        } else if (status === kakao.maps.services.Status.ERROR) {
            alert('검색 결과 중 오류가 발생했습니다.');
            return;
        }
    }

    function displayPlaces(places) {
        var listEl = document.getElementById('placesList');
        listEl.innerHTML = ''; // 기존 리스트 내용 비우기

        // 지도 초기화
        removeMarker();  // 이전 마커 제거

        var fragment = document.createDocumentFragment(),
            bounds = new kakao.maps.LatLngBounds();

        for (var i = 0; i < places.length; i++) {
            var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),
                marker = addMarker(placePosition, i),
                itemEl = getListItem(i, places[i]);

            bounds.extend(placePosition);

            // 마커에 이벤트를 추가합니다.
            (function(marker, title) {
                kakao.maps.event.addListener(marker, 'mouseover', function() {
                    displayInfowindow(marker, title);
                });
                kakao.maps.event.addListener(marker, 'mouseout', function() {
                    infowindow.close();
                });
                itemEl.onmouseover = function() {
                    displayInfowindow(marker, title);
                };
                itemEl.onmouseout = function() {
                    infowindow.close();
                };
            })(marker, places[i].place_name);

            fragment.appendChild(itemEl);
        }
        var container = document.createElement('div');
        container.style.width = '300px'; // 네모칸의 너비
        container.style.height = '400px'; // 네모칸의 높이
        container.style.overflowY = 'scroll'; // 세로 스크롤
        container.style.border = '1px solid #ccc'; // 테두리 스타일
        container.style.padding = '10px'; // 패딩
        container.appendChild(fragment);



        listEl.appendChild(container);
        map.setBounds(bounds);  // 지도에서 마커들이 보이도록 설정
    }

    function getListItem(index, places) {
        var el = document.createElement('li');
        el.style.listStyle = 'none'; 
        el.style.marginBottom = '25px';

        // 장소 정보 HTML 구조 변경
        var itemStr =
            '<div class="info" style="line-height: 1.3;">' +
            '<div style="font-size: 15px; font-weight: bold; margin-bottom: 5px;">' + (index + 1) + '. ' + places.place_name + '</div>' + // 장소 이름 
            '<div style="font-size: 15px; color: black; margin-bottom: 5px;">' + // 주소
            places.road_address_name +
            '</div>' +
            '<div style="font-size: 11px; color: green;">' + places.phone + '</div>' + // 전화번호
            '</div>';

        el.innerHTML = itemStr;
        el.className = 'item';
        return el;
    }

    function addMarker(position, idx) {
        var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png',
            imageSize = new kakao.maps.Size(36, 37),
            imgOptions = {
                spriteSize: new kakao.maps.Size(36, 691),
                spriteOrigin: new kakao.maps.Point(0, (idx * 46) + 10),
                offset: new kakao.maps.Point(13, 37)
            },
            markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),
            marker = new kakao.maps.Marker({
                position: position,
                image: markerImage
            });

        marker.setMap(map);
        markers.push(marker);
        return marker;
    }

    function removeMarker() {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }
        markers = [];
    }

    function displayPagination(pagination) {
        var paginationEl = document.getElementById('pagination'),
            fragment = document.createDocumentFragment();

        while (paginationEl.hasChildNodes()) {
            paginationEl.removeChild(paginationEl.lastChild);
        }

        for (var i = 1; i <= pagination.last; i++) {
            var el = document.createElement('a');
            el.href = "#";
            el.innerHTML = i;
            if (i === pagination.current) {
                el.className = 'on';
            } else {
                el.onclick = (function(i) {
                    return function() {
                        pagination.gotoPage(i);
                    };
                })(i);
            }
            fragment.appendChild(el);
        }
        paginationEl.appendChild(fragment);
    }


    function displayInfowindow(marker, title) {
        var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';
        infowindow.setContent(content);
        infowindow.open(map, marker);
    }

 
